NotasGit:

- pwd					Indica la ruta actual en la que se encuentra o directorio. 
- cat					Para visualizar el contenido de un archivo.
- mkdir "dirName"			Crear carpetas desde git 
- cd directoryName		Busca e ingresa a la carpeta archivo que indique.
- cd ..				Salir del directorio actual
- ls 					Para la lista de archivos que se hayen en la ubicacion actual.
- ls -a 				Para listar y mostrar absolutamente todos los archivos de la ubicacion actual.

- git init 				Inicializar un nuevo proyecto. 
- git status 			Para verificar el estado de los archivos de la carpeta. 
- git add fileName 		Agregar un archivo para seguirlo.
- git commit			Guardar un punto de control. 
	(Para hacer un commit se debe registrarse con usuario y email.)
		- git config --global user.email "you@example.com"
		- git config --global user.name "Your Name"
	(Una vez registrado en la consola y ejecutado el comando git commit)
		-insert		Para escribir, lo 1ero es darle un nombre al commit
		-Esc 			Para pasar a la linea de...
		-:wq			Para terminar el commit. w: Write, q: Quit 

- git log 				Para observar todos los commits creados.
- git log --oneline		Para observar todos los commits creados sin tanto detalle.

- git diff fileName 		Para comparar los cambios de los archivos. Sus diferencias.
- git diff --staged		Para visualizar los cambios de un archivo que ya se encuentra en staging.

	(Cuando se relizan cambios de los que no se desea estar al pendiente, se puede crear un archivo
	con nombre: .gitignore, el cual contendra los nombres de las carpetas y archivos que se deasean
	ignorar en forma de lista en diferentes lineas. Este archivo de crearse en el directorio actual)
- git commit -m "message"	Para agregar un nuevo commit, mas facil y rapidamente.

	(Con las ramas o branch podemos crear copias alternativas del proyecto y manipularlar por aparte,
	 son el equivalente a los usuarios de windows, todas manejan en este caso un proyecto en común
	 pero los cambios se mantienen solamente en sus respectivas ramas. Al igual sus archivos, los cuales
	 aparecen y desaparecen segun la rama en la que se encuentre).

- git branch 			Para visualizar las diferentes ramas y la rama actual.
- git branch "newBranch"	Para crear una nueva version alternativa del proyecto.
- git branch -m oldNam newNam Cambia el nombre de la rama que indiques a continuación por el que indiques segundo.	
					(Si solo se coloca el campo del oldName, cambia el nombre a la rama en la 
					que te encuentres).
- git branch -d branchName	Borra la rama que indiques a continuación.
- git checkout "branchName"	Para moverse a otra rama.
- git checkout -b "newbranch" Para crear una nueva rama y moverse a ella.

- git add .				Para agregar todos los cambios realizados de los archivos.	


- git remote add origin https	Para indicar el repositorio remoto en el que se van a guardar los archivos.
- git push -u origin main
- git push				Cargar contenido del repositorio local a un repositorio remoto
- git merge				Para fusionar una rama con la master.

- git config --global -e 	Para consultar datos del usuario
- git config -h			Para consultar el listado de las configuraciones de git.


- git rm filename			Para eliminar un archivo y a la vez subirlos los cambios al stagging. 	
- git restore --staged filename		Para sacar el cambio realizado, de la estapa de stage. Hacer un "unestage".
- git restore filename		Para restaurar un archivo eliminado.
- git mv oldfilename newfilename		Para renombrar un archivo y subir los cambios al staging.

